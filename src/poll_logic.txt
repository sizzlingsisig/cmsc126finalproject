// Fetch and render dynamic polls for fanPoll overlay
async function fetchAndRenderPolls(showVotes = false) {
  const container = document.getElementById("dynamic-polls-container");
  if (!container) return;

  try {
    const res = await fetch('get_polls.php');
    if (!res.ok) {
      container.textContent = 'Failed to load polls.';
      return;
    }
    const polls = await res.json();

    container.innerHTML = ''; // clear loading text

    // Load voted polls from localStorage (array of poll IDs user voted on)
    let votedPolls = JSON.parse(localStorage.getItem('votedPolls') || '[]');

    polls.forEach(poll => {
      const pollDiv = document.createElement('div');
      pollDiv.className = 'poll p-4 mb-6 border rounded shadow-sm bg-white';

      const question = document.createElement('h4');
      question.textContent = poll.question;
      question.className = "font-semibold mb-3";
      pollDiv.appendChild(question);

      const form = document.createElement('form');
      form.dataset.pollId = poll.poll_index;
      form.className = "poll-form";

      // Check if user already voted this poll
      const alreadyVoted = votedPolls.includes(poll.poll_index);

      poll.options.forEach(option => {
        const label = document.createElement('label');
        label.className = 'option flex items-center justify-between cursor-pointer p-2 rounded hover:bg-gray-100';
        label.style.display = "flex";
        label.style.justifyContent = "space-between";
        label.style.alignItems = "center";
        label.style.marginTop = "0.5rem";

        const leftSpan = document.createElement('span');
        leftSpan.style.display = "flex";
        leftSpan.style.alignItems = "center";

        const radio = document.createElement('input');
        radio.type = 'radio';
        radio.name = `poll_${poll.poll_index}`;
        radio.value = option.id;

        if (alreadyVoted) {
          radio.disabled = true;  // disable radios if already voted
        }

        leftSpan.appendChild(radio);
        leftSpan.appendChild(document.createTextNode(' ' + option.text));
        label.appendChild(leftSpan);

        const votesSpan = document.createElement('span');
        votesSpan.className = 'votes text-gray-600 text-sm ml-4';
        votesSpan.textContent = `Votes: ${option.votes}`;
        votesSpan.style.visibility = showVotes ? 'visible' : 'hidden';
        label.appendChild(votesSpan);

        form.appendChild(label);
      });

      const submitBtn = document.createElement('button');
      submitBtn.type = 'submit';
      submitBtn.textContent = 'Vote';
      submitBtn.className = "mt-4 bg-black text-white rounded px-4 py-2 hover:bg-yellow-500";

      if (alreadyVoted) {
        submitBtn.disabled = true;  // disable submit button if already voted
        const votedMsg = document.createElement('p');
        votedMsg.textContent = "You have already voted on this poll.";
        votedMsg.className = "text-green-600 font-semibold mt-2";
        pollDiv.appendChild(votedMsg);
      }

      form.appendChild(submitBtn);

      form.addEventListener('submit', async e => {
        e.preventDefault();
        if (alreadyVoted) {
          alert('You have already voted on this poll.');
          return;
        }

        const formData = new FormData(form);
        const selected = formData.get(`poll_${poll.poll_index}`);
        if (!selected) {
          alert('Please select an option!');
          return;
        }

        try {
          const res = await fetch('submit_poll.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams({polloptionid: selected})
          });
          const data = await res.json();
          if (data.success) {
            alert(data.message || 'Vote submitted!');
            // Save this poll ID as voted in localStorage
            votedPolls.push(poll.poll_index);
            localStorage.setItem('votedPolls', JSON.stringify(votedPolls));
            // Re-render with votes shown
            fetchAndRenderPolls(true);
          } else {
            alert('Error: ' + (data.error || 'Unknown error'));
          }
        } catch {
          alert('Error submitting vote.');
        }
      });

      pollDiv.appendChild(form);
      container.appendChild(pollDiv);
    });

  } catch (err) {
    container.textContent = 'Error loading polls.';
  }
}

// Function to open the fan poll overlay and fetch polls
function openFanPoll() {
  showOverlay("Fan Poll", `<div id="dynamic-polls-container" class="overflow-y-auto max-h-[500px] pr-2">Loading polls...</div>`);
  fetchAndRenderPolls();
}
